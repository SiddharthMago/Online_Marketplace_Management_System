-- Create Seller table
CREATE TABLE Seller (
    seller_id VARCHAR(10) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    street VARCHAR(255),
    city VARCHAR(100),
    state VARCHAR(100),
    zip VARCHAR(10),
    join_date DATE NOT NULL,
    rating DECIMAL(2, 1) CHECK (rating BETWEEN 0.0 AND 5.0),
    referred_by VARCHAR(10),
    FOREIGN KEY (referred_by) REFERENCES Seller(seller_id)
);

-- Create Premium_Seller table (subclass of Seller)
CREATE TABLE Premium_Seller ( 
	seller_id VARCHAR(10) PRIMARY KEY, 
	premium_since DATE NOT NULL, tier VARCHAR(10) CHECK (tier IN ('SILVER', 'GOLD', 	'PLATINUM')), 
	commission_rate DECIMAL(3, 2) CHECK(commission_rate BETWEEN 0.01 AND 0.10), 
	FOREIGN KEY (seller_id) REFERENCES Seller(seller_id) 
);

-- Create Category table
CREATE TABLE Category (
    category_id VARCHAR(10) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    parent_category_id VARCHAR(10),
    FOREIGN KEY (parent_category_id) REFERENCES Category(category_id)
);

-- Create Product table
CREATE TABLE Product (
    product_id VARCHAR(10),
    SKU VARCHAR(50) UNIQUE,
    name VARCHAR(255) NOT NULL,
    price FLOAT CHECK (price > 0),
    stock INT CHECK (stock >= 0),
    seller_id VARCHAR(10) NOT NULL,
    category_id VARCHAR(10) NOT NULL,
    PRIMARY KEY (product_id, SKU),
    FOREIGN KEY (seller_id) REFERENCES Seller(seller_id),
    FOREIGN KEY (category_id) REFERENCES Category(category_id)
);

-- Create Customer table
CREATE TABLE Customer (
    customer_id VARCHAR(10) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    street VARCHAR(255),
    city VARCHAR(100),
    state VARCHAR(100),
    zip VARCHAR(10),
    join_date DATE NOT NULL
);

CREATE TABLE Order (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    transaction_id VARCHAR(20) UNIQUE NOT NULL,
    ordered_by VARCHAR(10) NOT NULL,
    rating DECIMAL(2, 1),
    order_date DATE NOT NULL,
    order_status ENUM('DELIVERED', 'PENDING', 'OUT FOR DELIVERY') NOT NULL,
    FOREIGN KEY (ordered_by) REFERENCES Customer(customer_id)
);

-- Create Order_Item table (weak entity)
CREATE TABLE Order_Item (
    order_id INT,
    transaction_id VARCHAR(20),
    item_number INT,
    product_id VARCHAR(10),
    quantity INT CHECK (quantity > 0),
    unit_price FLOAT CHECK (unit_price > 0),
    PRIMARY KEY (order_id, item_number, transaction_id),
    FOREIGN KEY (order_id) REFERENCES Order(order_id),
    FOREIGN KEY (product_id) REFERENCES Product(product_id)
);

-- Create Product_Review table (weak entity)
CREATE TABLE Product_Review (
    review_id INTÂ AUTO_INCREMENT PRIMARY KEY,
    customer_id VARCHAR(10) NOT NULL,
    product_id VARCHAR(10) NOT NULL,
    rating DECIMAL(2, 1) CHECK (rating BETWEEN 0.0 AND 5.0),
    comment TEXT,
    review_date DATE NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES Customer(customer_id),
    FOREIGN KEY (product_id) REFERENCES Product(product_id)
);

-- Create Product_Review table
CREATE TABLE Product_Review ( 
    review_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id VARCHAR(10) NOT NULL,
    product_id VARCHAR(10) NOT NULL, 
    rating DECIMAL(2, 1) CHECK (rating BETWEEN 0.0 AND 5.0), 
    comment TEXT, 
    review_date DATE NOT NULL, 
    FOREIGN KEY (customer_id) REFERENCES Customer(customer_id), 
    FOREIGN KEY (product_id) REFERENCES Product(product_id), 
    UNIQUE(customer_id, product_id)
);

-- Create Discount_Code table
CREATE TABLE Discount_Code (
    promotion_id VARCHAR(10),
    code VARCHAR(20),
    type VARCHAR(50),
    value FLOAT,
    expiry DATE NOT NULL,
    PRIMARY KEY(promotion_id, code),
    FOREIGN KEY(promotion_id) REFERENCES Promotion(promotion_id)
);

-- Create Product_Images table
CREATE TABLE Product_Images ( 
    image_id INT AUTO_INCREMENT PRIMARY KEY, 
    product_id VARCHAR(10), 
    image LONGBLOB NOT NULL, 
    FOREIGN KEY (product_id) REFERENCES Product(product_id) 
);